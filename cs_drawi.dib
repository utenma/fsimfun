#!meta

{"kernelInfo":{"defaultKernelName":"csharp","items":[{"aliases":[],"languageName":"csharp","name":"csharp"}]}}

#!csharp

Console.WriteLine("Hello World!");

int a = 10;

Console.WriteLine(a);

#!csharp

var xy = Enumerable.Range(1, 100).Select(x => (x, Math.Sqrt(x))).ToList();

#r "nuget: Plotly.NET.Interactive, 5.0.0"
#r "nuget: Plotly.NET.CSharp, 0.12.0"

#!csharp

using System;
using Plotly.NET.CSharp;

Chart.Point<double, double, string>(
    x: new double[] { 1, 2 }, 
    y: new double[] { 5, 10 }
)

#!csharp

using SkiaSharp;
using System.IO;
using Microsoft.DotNet.Interactive.Formatting;

string SKBitmapPrint(SKBitmap bitmap) {
    using (MemoryStream ms = new())
    {
        bitmap.Encode(ms, SKEncodedImageFormat.Png, 100);
        byte[] data = ms.ToArray();

        var b64 = Convert.ToBase64String(data);

        return b64;
    }
}

Formatter.Register<SKBitmap> (SKBitmapPrint,  "image/png")

#!csharp

#r "nuget: SkiaSharp, 2.88.8"
#r "nuget: SkiaSharp.NativeAssets.Linux, 2.88.8"

using SkiaSharp;

// Create an image and fill it blue
using (SKBitmap bmp = new(640, 480))
{
    using (SKCanvas canvas = new SKCanvas(bmp))
    {
        canvas.Clear(SKColor.Parse("#003366"));

        // Draw lines with random positions and thicknesses
        Random rand = new(0);
        SKPaint paint = new() { Color = SKColors.White.WithAlpha(100), IsAntialias = true };
        for (int i = 0; i < 100; i++)
        {
            SKPoint pt1 = new(rand.Next(bmp.Width), rand.Next(bmp.Height));
            SKPoint pt2 = new(rand.Next(bmp.Width), rand.Next(bmp.Height));
            paint.StrokeWidth = rand.Next(1, 10);
            canvas.DrawLine(pt1, pt2, paint);
        }

        display(bmp);
    }
}
