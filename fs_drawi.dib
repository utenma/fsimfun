#!meta

{"kernelInfo":{"defaultKernelName":"csharp","items":[{"aliases":[],"name":"csharp"}]}}

#!fsharp

// say hi in Console
printfn "Hello, World!"

#!fsharp

let isOdd value = value % 2 <> 0
let square value = value * value
let getOddSquares values = 
    values 
    |> List.filter isOdd 
    |> List.map square

getOddSquares [1..10]

#!fsharp

let xy = [ for x in [1..100] -> (x, square x) ]

#r "nuget: Plotly.NET.Interactive, 5.0.0"
#r "nuget: FSharp.Data"

open FSharp.Data 
open Plotly.NET

Chart.Point(xy)

#!fsharp

#r "nuget: SkiaSharp, 2.88.8"
#r "nuget: SkiaSharp.NativeAssets.Linux, 2.88.8"

open SkiaSharp
open Microsoft.DotNet.Interactive.Formatting

let conv (bmp: SKBitmap): string =
    use ms = new System.IO.MemoryStream()
    bmp.Encode(ms, SKEncodedImageFormat.Png, quality = 100) |> ignore
    bmp.Dispose()
    ms.ToArray() |> System.Convert.ToBase64String

// Register a formatter for the "image/png" MIME type
Formatter.Register<SKBitmap> (conv,  "image/png")

#!fsharp

open SkiaSharp

let genRandImg () = 
    // Create an image and fill it blue
    let bmp = new SKBitmap(640, 480)
    use canvas = new SKCanvas(bmp)

    canvas.Clear(SKColor.Parse("#003366"))

    // Draw lines with random positions and thicknesses
    let rand = new Random()
    use paint = new SKPaint(Color = SKColors.White.WithAlpha(byte 100), IsAntialias = true)
    for i in 0..99 do
        let pt1 = new SKPoint(float32 (rand.Next(bmp.Width)), float32 (rand.Next(bmp.Height)))
        let pt2 = new SKPoint(float32 (rand.Next(bmp.Width)), float32 (rand.Next(bmp.Height)))
        paint.StrokeWidth <- float32 (rand.Next(1, 10))
        canvas.DrawLine(pt1, pt2, paint)

    bmp

// Display the PNG image
let bmp = genRandImg()
// Display the PNG image
let x = display(bmp, "image/png")
bmp.Dispose()

#!fsharp

// Display the PNG image
let bmps = genRandImg()
// Display the PNG image
display(bmps, "image/png")

#!fsharp

open Microsoft.DotNet.Interactive

let timer = new Timers.Timer(2000.)
let event = Async.AwaitEvent (timer.Elapsed) |> Async.Ignore

timer.Start()
while true do
    Async.RunSynchronously event
    printfn "%A" DateTime.Now

0 // return an integer exit code

#!html

<span id="d">
    <button onclick="() => console.log('Hello, world!')">Click me!</button>
</span>

#!fsharp

open SkiaSharp

let genRandImg = 
    let height = 480f
    let width = 480f

    // create SKImageInfo
    let info = new SKImageInfo(int width, int height, SKColorType.Rgba8888, SKAlphaType.Premul)

    // Create an image and fill it blue
    let bmp = new SKBitmap(int width, int height)
    use canvas = new SKCanvas(bmp)

    canvas.Clear(SKColors.WhiteSmoke)

    let rand = new Random(0)
    use paint = new SKPaint(Color = SKColors.White.WithAlpha(byte 100), IsAntialias = true)

    paint.Style <- SKPaintStyle.Stroke
    paint.Color <- SKColors.Red
    paint.StrokeWidth <- 25.0f
    canvas.DrawCircle(height/2f, width/2f, 100f, paint);

    paint.Style <- SKPaintStyle.Fill;
    paint.Color <- SKColors.Blue;
    canvas.DrawCircle(height/2f, width/2f, 100f, paint);

    bmp

let bmp = genRandImg
// Display the PNG image
display(bmp, "image/png")
bmp.Dispose()

#!fsharp

//let (:=) target value = target <- value

let mutable x = 0
x <- 1

printfn "%d" x

// // use := instead of <-

// let inline (.=) (var: byref<'a>) (incValue: 'a) = var <- incValue

let inline ( <-- ) (x: ^a byref) (v: ^a) : unit = x <- v

x <-- 2

// // x .= 2

// let inline (+<-) (metable var: byref<'a>) (incValue: 'a) = var <- var + incValue

// x +<- 2

printfn "%d" x

#!fsharp

let v = ref 0
let mutate r = 
    r := 100
